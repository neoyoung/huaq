Pandas 的数据结构

DataFrame：二维数据，整个表格，多行多列     
df.index     数据列索引
df.columns   数据行索引


数据查找
df.loc[df['id']==100,]


数据合并
df3 = pd.merge(df1,df2,on='id',how='left')


Series：行或列就是一维数据   即一行或者一列数据就是
一维数据相当于字典  可操作性强

1.Series
2.DataFrame 
3.从DataFrame中查询出Series


Pandas  DataFrame的几个方法
    to_dict:  转成字典
    to_frame：转成DataFrame
    reset_index：DataFrame类型的索引重置
    rename：DataFrame的字段属性重置
	query : 条件查询
	        df[df["c"]=='7']
			df.query("c=='7'")
			df[df["b"]=="aabb"]
			df.query("b=='aabb'")
			#选择多个列条件的行
            df.query("b==['aabb','abd']")
            #选择行要满足多个行条件
            df[((df["b"] == "ggkk") == (df["e"] == "abd"))==True]
			
# 数据表透视	
pandas.pivot_table(data,  # 制作透视表的数据
               values=None,  # 值
               index=None,  # 行索引
               columns=None,  # 列属性
               aggfunc='mean',   # 使用的函数，默认是均值
               fill_value=None,  # 缺失值填充
               margins=False, # 是否显示总计
               dropna=True,   # 缺失值处理
               margins_name='All', # 总计显示为All
               observed=False,  
               sort=True  # 排序功能  版本1.3.0才有
              )
			  
# 设定索引为日期，方便按日期筛选   设置某顺序列为索引  如 使用130项因子序号
df.set_index('GRIDNUM', inplace=True) 
			  
# 替换掉温度的后缀℃   字符串处理  转数据类型
df.loc[:, "bWendu"] = df["bWendu"].str.replace("℃", "").astype('int32')

# 得到单个值
df.loc['2018-01-03', 'bWendu']
# 得到一个Series
df.loc['2018-01-03', ['bWendu', 'yWendu']]


dataframe条件表达式查询
df[df["yWendu"] < -10].head()
df[
    (df["bWendu"]<=30) 
    & (df["yWendu"]>=15) 
    & (df["tianqi"]=='晴') 
    & (df["aqiLevel"]==1)]  #多条件查询

query方式查询
df.query("yWendu < 3").head(3)
## 查询最高温度小于30度，并且最低温度大于15度，并且是晴天，并且天气为优的数据
df.query("bWendu<=30 & yWendu>=15 & tianqi=='晴' & aqiLevel==1")
# 使用外部变量查询
high_temperature = 15
low_temperature = 13
df.query("yWendu<=@high_temperature & yWendu>=@low_temperature").head()


dataframe进行遍历
iterrows(), iteritems(), itertuples()对dataframe进行遍历

iterrows(): 将DataFrame迭代为(insex, Series)
itertuples(): 将DataFrame迭代为元祖
iteritems(): 将DataFrame迭代为(列名, Series)

日期的整数类型转换为字符串类型数据
df['date'] = df['year'].map(str)+"/"+df['month'].map(str)+"/"+df['day'].map(str)


根据行列坐标写Excel数据

iloc就是根据索引定位
df.iloc[2,2] = 1111

loc就是根据标签的名称定位
df.loc['20191228','B'] = 2222


GRIDNUM  [HANG,LIE]   对应取值  填值

预报对象数据
因子格点数据     corr

多个DataFrame写到同一个Excel sheet

writer = pd.ExcelWriter('test.xlsx')

df1.to_excel(writer)
df2.to_excel(writer,startcol=8)
df2.to_excel(writer,startrow=10)
df3.to_excel(writer,startrow=10,startcol=8)


DataFrame的处理
上下拼接
pandas.append()
左右拼接
panndas.join()
上下或左右
pandas.concat()
axis=0  上下合并
axis=1  左右合并


pandas.merge()         相当于Excel的vlookup
pandas.pivot_table()   Excel透视表操作

两种窗口操作 
rolling()              滚动操作 
expanding()            扩展窗口的求和操作


使用map修改列的值
    frame.price = frame.price.map(lambda x: x + 1)

DataFrame的合并
    pd.concat([df1，df2]，ignore_index = True)
	pd.merge()
    
Pandas删除某一列的方法
1.del df['columns'] #改变原始数据

2.df.drop('columns',axis=1)#删除不改表原始数据，可以通过重新赋值的方式赋值该数据

3.df.drop('columns',axis=1,inplace='True') #改变原始数据


某列进行字符串操作
df['test'].str.len()  

Pandas数据查询
    按数值、列表、区间、条件、函数 五种方法
	
	
	
	
缺失值处理
df.dropna(how='all')

四种选取数据的方法  loc iloc at iat
与 list/dict/NumPy的转换   tolist()  todict() tonump()